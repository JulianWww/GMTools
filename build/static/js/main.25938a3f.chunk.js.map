{"version":3,"sources":["components/Header.tsx","components/InitativeQueue.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["REPO_LINK","HomepageHeading","mobile","Container","text","Header","as","content","inverted","style","fontSize","fontWeight","marginBottom","marginTop","DesktopContainer","props","hideFixedMenu","setState","fixed","showFixedMenu","state","children","this","Responsive","minWidth","onlyMobile","maxWidth","Visibility","once","onBottomPassed","onBottomPassedReverse","Segment","textAlign","minHeight","padding","vertical","Menu","undefined","pointing","secondary","size","Item","active","React","MobileContainer","handlePusherClick","sidebarOpened","handleToggle","Sidebar","Pushable","animation","visible","Pusher","dimmed","onClick","Icon","name","Tail","className","Grid","divided","stackable","Row","Column","List","link","href","ResponsiveContainer","InitativeQueue","updateIndexModifier","indexModifier","elements","length","addElement","add","_add","index","initiative","splice","newInitativeString","data","width","Button","fluid","primary","map","currElement","idx","renderElement","Input","label","onChange","event","value","Number","icon","forceUpdate","Divider","renderQueue","App","exact","path","urlBase","component","Boolean","window","location","hostname","match","ReactGA","pathname","search","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","history","createHistory","listen","action","page","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25938a3f.chunk.js","sourcesContent":["import * as React from 'react';\nimport {\n  Container,\n  Header,\n  Icon,\n  Menu,\n  Responsive,\n  Segment,\n  Sidebar,\n  Grid,\n  List,\n  Visibility,\n} from 'semantic-ui-react';\n\ninterface HomepageHeadingProps {\n  mobile: boolean;\n}\n\nconst REPO_LINK = 'https://github.com/MaxwellBo/Muncoordinated-2';\n\n/* eslint-disable react/no-multi-comp */\n/* Heads up! HomepageHeading uses inline styling, however it's not the best practice. Use CSS or styled components for\n * such things.\n */\nconst HomepageHeading = ({ mobile }: HomepageHeadingProps) => (\n  <Container text>\n    <Header\n      as=\"h1\"\n      content=\"GM Tools\"\n      inverted\n      style={{\n        fontSize: mobile ? '2em' : '4em',\n        fontWeight: 'normal',\n        marginBottom: 0,\n        marginTop: mobile ? '1.5em' : '3em',\n      }}\n    />\n    <Header\n      as=\"h2\"\n      content=\"Help tools for RPG GMs\"\n      inverted\n      style={{\n        fontSize: mobile ? '1.5em' : '1.7em',\n        fontWeight: 'normal',\n        marginTop: mobile ? '0.5em' : '1.5em',\n      }}\n    />\n  </Container>\n);\n\ninterface DesktopContainerProps {\n  children?: React.ReactNode;\n}\n\ninterface DesktopContainerState {\n  fixed: boolean;\n}\n\n/* Heads up!\n * Neither Semantic UI nor Semantic UI React offer a responsive navbar, however, it can be implemented easily.\n * It can be more complicated, but you can create really flexible markup.\n */\n\nclass DesktopContainer extends React.Component<DesktopContainerProps, DesktopContainerState> {\n  constructor(props: DesktopContainerProps) {\n    super(props);\n\n    this.state = {\n      fixed: false\n    };\n  }\n\n  hideFixedMenu = () => {\n    this.setState({ fixed: false });\n  }\n\n  showFixedMenu = () => {\n    this.setState({ fixed: true });\n  }\n\n  render() {\n    const { children } = this.props;\n    const { fixed } = this.state;\n\n    // Semantic-UI-React/src/addons/Responsive/Responsive.js\n    return (\n      // @ts-ignore\n      <Responsive {...{ minWidth: Responsive.onlyMobile.maxWidth + 1 }}>\n        <Visibility once={false} onBottomPassed={this.showFixedMenu} onBottomPassedReverse={this.hideFixedMenu}>\n          <Segment inverted textAlign=\"center\" style={{ minHeight: 700, padding: '1em 0em' }} vertical>\n            <Menu\n              fixed={fixed ? 'top' : undefined}\n              inverted={!fixed}\n              pointing={!fixed}\n              secondary={!fixed}\n              size=\"large\"\n            >\n              <Container>\n                <Menu.Item as=\"a\" active>Initiative</Menu.Item>\n              </Container>\n            </Menu>\n            <HomepageHeading mobile={false} />\n          </Segment>\n        </Visibility>\n\n        {children}\n      </Responsive>\n    );\n  }\n}\n\ninterface MobileContainerProps {\n  children?: React.ReactNode;\n}\n\ninterface MobileContainerState {\n  sidebarOpened: boolean;\n}\n\nclass MobileContainer extends React.Component<MobileContainerProps, MobileContainerState> {\n  constructor(props: MobileContainerProps) {\n    super(props);\n\n    this.state = {\n      sidebarOpened: false\n    };\n  }\n\n  handlePusherClick = () => {\n    const { sidebarOpened } = this.state;\n\n    if (sidebarOpened) {\n      this.setState({ sidebarOpened: false });\n    }\n  }\n\n  handleToggle = () => {\n    this.setState({ sidebarOpened: !this.state.sidebarOpened });\n  }\n\n  render() {\n    const { children } = this.props;\n    const { sidebarOpened } = this.state;\n\n    return (\n      <Responsive {...Responsive.onlyMobile}>\n        <Sidebar.Pushable>\n          <Sidebar as={Menu} animation=\"uncover\" inverted vertical visible={sidebarOpened}>\n            <Menu.Item as=\"a\" active>Initiative</Menu.Item>\n          </Sidebar>\n\n          <Sidebar.Pusher dimmed={sidebarOpened} onClick={this.handlePusherClick} style={{ minHeight: '100vh' }}>\n            <Segment inverted textAlign=\"center\" style={{ minHeight: 350, padding: '1em 0em' }} vertical>\n              <Container>\n                <Menu inverted pointing secondary size=\"large\">\n                  <Menu.Item onClick={this.handleToggle}>\n                    <Icon name=\"sidebar\" />\n                  </Menu.Item>\n                </Menu>\n              </Container>\n              <HomepageHeading mobile={true} />\n            </Segment>\n\n            {children}\n          </Sidebar.Pusher>\n        </Sidebar.Pushable>\n      </Responsive>\n    );\n  }\n}\n\ninterface ResponsiveContainerProps {\n  children?: React.ReactNode;\n}\n\nconst Tail = ({children}: ResponsiveContainerProps) => (\n  <Segment inverted vertical style={{ padding: '5em 0em' }}>\n    <Container className={\"fullwidth\"}>\n      <Grid divided inverted stackable className={\"fullwidth\"}>\n        <Grid.Row className={\"fullwidth\"}>\n          <Grid.Column className={\"thirdwidth\"}>\n            <Header inverted as=\"h4\" content=\"About\" />\n            <List link inverted>\n              <List.Item as=\"a\" href={REPO_LINK}>Source</List.Item>\n              <List.Item\n                as=\"a\"\n                href={REPO_LINK + \"/blob/master/LICENSE\"}\n              >\n                License\n              </List.Item>\n              {/* <List.Item as=\"a\">Contact Us</List.Item> TODO */}\n            </List>\n          </Grid.Column>\n          <Grid.Column className={\"thirdwidth\"}>\n            <Header inverted as=\"h4\" content=\"Services\" />\n            <List link inverted>\n              <List.Item as=\"a\" href={REPO_LINK + \"/discussions\"}>Forum</List.Item>\n              <List.Item as=\"a\" href={REPO_LINK + \"/issues\"}>Support</List.Item>\n              {/* <List.Item as=\"a\">FAQ</List.Item> TODO*/}\n            </List>\n          </Grid.Column>\n          <Grid.Column className={\"thirdwidth\"}>\n            <Header as=\"h4\" inverted>Info</Header>\n            <p>Made by <a href=\"https://github.com/JulianWww\">Julian Wandhoven</a></p>\n            <p>Copyright © 2022</p>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  </Segment>\n);\n\nexport const ResponsiveContainer = ({ children }: ResponsiveContainerProps) => (\n  <div>\n    <React.Fragment>\n      <DesktopContainer>{children}</DesktopContainer>\n      <MobileContainer>{children}</MobileContainer>\n    </React.Fragment>\n    <Tail/>\n  </div>\n);","import * as React from 'react';\nimport {\n  Container,\n  Input,\n  Header,\n  Grid,\n  Button,\n  Segment,\n  Divider,\n  InputOnChangeData,\n} from 'semantic-ui-react';\nimport {ResponsiveContainer} from \"./Header\";\n\ninterface Props {\n}\n\ninterface PersonData {\n  name: string;\n  initiative: number;\n}\n\ninterface State {\n  newInitativeString: string;\n  indexModifier: number;\n  add: PersonData;\n  elements: Array<PersonData>;\n}\n\nexport default class InitativeQueue extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const defaultValue : PersonData = {\n      name: \"\", \n      initiative: 1\n    };\n\n    this.state = {\n      newInitativeString: \"\",\n      add: defaultValue,\n      indexModifier: 0,\n      elements: [],\n    };\n  }\n\n  updateIndexModifier = () => {\n    let {indexModifier, elements} = this.state;\n    this.setState({indexModifier: (indexModifier + 1) % elements.length})\n  }\n\n  renderElement(data: PersonData) {\n    return <Segment>\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={14}>\n            <Header>{data.name}</Header>\n          </Grid.Column>\n          <Grid.Column className=\"rightAlign\" width={2}>\n            {data.initiative}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Segment>\n  }\n\n  renderQueue() {\n    return <Segment>\n      <Button\n        fluid\n        primary\n        onClick={this.updateIndexModifier}\n      >\n        next\n      </Button>\n      {this.state.elements.map((currElement, index) => {\n        let idx = (index + this.state.indexModifier) % this.state.elements.length\n        return this.renderElement(this.state.elements[idx])\n      })}\n    </Segment>\n  }\n\n  addElement = () => {\n    var {elements, add} = this.state\n    let _add: PersonData = {...add}\n    for (let index = 0; index < elements.length; index++) {\n      if (elements[index].initiative < add.initiative) {\n        elements.splice(index, 0, _add)\n        return\n      }\n    }\n    elements[elements.length] = _add\n  }\n\n  render() {\n    return (\n      <ResponsiveContainer>\n        <Container text style={{ padding: '1em 0em' }}>\n          <Header>Add Person</Header>\n          <Grid>\n            <Grid.Row>\n              <Grid.Column width={7}>\n                <Input\n                  fluid\n                  label=\"name\"\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {\n                    this.state.add.name = data.value;\n                  }}\n                />\n              </Grid.Column>\n              <Grid.Column width={7}>\n                <Input\n                  fluid\n                  label=\"initiative\"\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {\n                    const value: number = Number(data.value);\n                    if (value || data.value === \"\") {\n                      this.state.add.initiative = value;\n                      this.setState({newInitativeString: data.value,})\n                    }\n                  }}\n                  value={this.state.newInitativeString}\n                />\n              </Grid.Column>\n              <Grid.Column width={2}>\n                <Button\n                  fluid\n                  primary\n                  icon=\"plus\"\n                  onClick={(event: React.MouseEvent<HTMLButtonElement, MouseEvent>, data: any) => {\n                    this.addElement()\n                    this.forceUpdate()\n                  }}\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n          <Divider/>\n          {this.renderQueue()}\n        </Container>\n      </ResponsiveContainer>\n    );\n  }\n}","import * as React from 'react';\n\nimport { Route, Switch } from 'react-router-dom';\nimport {Header} from 'semantic-ui-react';\nimport './App.css';\n\nimport InitativeQueue from './components/InitativeQueue';\nimport {urlBase} from \"./const\";\n//const firebaseConfig = {\n//  apiKey: 'AIzaSyA9EuEf7m3YOTBhBNhoe7DcOIZJP2toL6w',\n//  authDomain: 'muncoordinated.firebaseapp.com',\n//  databaseURL: 'https://muncoordinated.firebaseio.com',\n//  projectId: 'muncoordinated',\n//  storageBucket: 'muncoordinated.appspot.com',\n//  messagingSenderId: '308589918735',\n//  appId: \"1:308589918735:web:f3567ce28d637eba40017a\",\n//  measurementId: \"G-DPWPPBRD4M\"\n//};\n\n//firebase.initializeApp(firebaseConfig);\n//firebase.analytics();\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path={urlBase + \"/\"} component={InitativeQueue} />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport createHistory from 'history/createBrowserHistory';\nimport * as ReactGA from 'react-ga';\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\nimport 'semantic-ui-css/semantic.min.css';\n\nReactGA.initialize('UA-122177622-1');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nSentry.init({\n  dsn: \"https://e1ea501c7fed49d9af75b57440753eed@o456960.ingest.sentry.io/5450534\",\n  integrations: [\n    new Integrations.BrowserTracing(),\n  ],\n\n  // We recommend adjusting this value in production, or using tracesSampler\n  // for finer control\n  tracesSampleRate: 1.0,\n});\n\nconst history = createHistory();\n\nhistory.listen((location, action) => {\n  ReactGA.set({ page: location.pathname });\n  ReactGA.pageview(location.pathname);\n});\n\nReactDOM.render(\n// @ts-ignore\n  <Router history={history}>\n    <App />\n  </Router>,\n  document.getElementById('root') as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}